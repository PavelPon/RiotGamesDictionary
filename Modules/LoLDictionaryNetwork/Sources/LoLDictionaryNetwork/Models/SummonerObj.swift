//
// SummonerObj.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct SummonerObj: Codable, JSONEncodable, Hashable {

    public var id: String
    public var name: String
    public var description: String
    public var tooltip: String
    public var maxrank: Double
    public var cooldown: [Double]
    public var cooldownBurn: String
    public var cost: [Double]
    public var costBurn: String
    public var key: String
    public var summonerLevel: Double
    public var modes: [String]
    public var costType: String
    public var maxammo: String
    public var range: [Double]
    public var rangeBurn: String
    public var image: ImageObj
    public var resource: String

    public init(id: String, name: String, description: String, tooltip: String, maxrank: Double, cooldown: [Double], cooldownBurn: String, cost: [Double], costBurn: String, key: String, summonerLevel: Double, modes: [String], costType: String, maxammo: String, range: [Double], rangeBurn: String, image: ImageObj, resource: String) {
        self.id = id
        self.name = name
        self.description = description
        self.tooltip = tooltip
        self.maxrank = maxrank
        self.cooldown = cooldown
        self.cooldownBurn = cooldownBurn
        self.cost = cost
        self.costBurn = costBurn
        self.key = key
        self.summonerLevel = summonerLevel
        self.modes = modes
        self.costType = costType
        self.maxammo = maxammo
        self.range = range
        self.rangeBurn = rangeBurn
        self.image = image
        self.resource = resource
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case name
        case description
        case tooltip
        case maxrank
        case cooldown
        case cooldownBurn
        case cost
        case costBurn
        case key
        case summonerLevel
        case modes
        case costType
        case maxammo
        case range
        case rangeBurn
        case image
        case resource
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(id, forKey: .id)
        try container.encode(name, forKey: .name)
        try container.encode(description, forKey: .description)
        try container.encode(tooltip, forKey: .tooltip)
        try container.encode(maxrank, forKey: .maxrank)
        try container.encode(cooldown, forKey: .cooldown)
        try container.encode(cooldownBurn, forKey: .cooldownBurn)
        try container.encode(cost, forKey: .cost)
        try container.encode(costBurn, forKey: .costBurn)
        try container.encode(key, forKey: .key)
        try container.encode(summonerLevel, forKey: .summonerLevel)
        try container.encode(modes, forKey: .modes)
        try container.encode(costType, forKey: .costType)
        try container.encode(maxammo, forKey: .maxammo)
        try container.encode(range, forKey: .range)
        try container.encode(rangeBurn, forKey: .rangeBurn)
        try container.encode(image, forKey: .image)
        try container.encode(resource, forKey: .resource)
    }
}

