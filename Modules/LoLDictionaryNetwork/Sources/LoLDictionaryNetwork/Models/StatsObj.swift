//
// StatsObj.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct StatsObj: Codable, JSONEncodable, Hashable {

    public var hp: Double
    public var hpperlevel: Double
    public var mp: Double
    public var mpperlevel: Double
    public var movespeed: Double
    public var armor: Double
    public var armorperlevel: Double
    public var spellblock: Double
    public var spellblockperlevel: Double
    public var attackrange: Double
    public var hpregen: Double
    public var hpregenperlevel: Double
    public var mpregen: Double
    public var mpregenperlevel: Double
    public var crit: Double
    public var critperlevel: Double
    public var attackdamage: Double
    public var attackdamageperlevel: Double
    public var attackspeedperlevel: Double
    public var attackspeed: Double

    public init(hp: Double, hpperlevel: Double, mp: Double, mpperlevel: Double, movespeed: Double, armor: Double, armorperlevel: Double, spellblock: Double, spellblockperlevel: Double, attackrange: Double, hpregen: Double, hpregenperlevel: Double, mpregen: Double, mpregenperlevel: Double, crit: Double, critperlevel: Double, attackdamage: Double, attackdamageperlevel: Double, attackspeedperlevel: Double, attackspeed: Double) {
        self.hp = hp
        self.hpperlevel = hpperlevel
        self.mp = mp
        self.mpperlevel = mpperlevel
        self.movespeed = movespeed
        self.armor = armor
        self.armorperlevel = armorperlevel
        self.spellblock = spellblock
        self.spellblockperlevel = spellblockperlevel
        self.attackrange = attackrange
        self.hpregen = hpregen
        self.hpregenperlevel = hpregenperlevel
        self.mpregen = mpregen
        self.mpregenperlevel = mpregenperlevel
        self.crit = crit
        self.critperlevel = critperlevel
        self.attackdamage = attackdamage
        self.attackdamageperlevel = attackdamageperlevel
        self.attackspeedperlevel = attackspeedperlevel
        self.attackspeed = attackspeed
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case hp
        case hpperlevel
        case mp
        case mpperlevel
        case movespeed
        case armor
        case armorperlevel
        case spellblock
        case spellblockperlevel
        case attackrange
        case hpregen
        case hpregenperlevel
        case mpregen
        case mpregenperlevel
        case crit
        case critperlevel
        case attackdamage
        case attackdamageperlevel
        case attackspeedperlevel
        case attackspeed
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(hp, forKey: .hp)
        try container.encode(hpperlevel, forKey: .hpperlevel)
        try container.encode(mp, forKey: .mp)
        try container.encode(mpperlevel, forKey: .mpperlevel)
        try container.encode(movespeed, forKey: .movespeed)
        try container.encode(armor, forKey: .armor)
        try container.encode(armorperlevel, forKey: .armorperlevel)
        try container.encode(spellblock, forKey: .spellblock)
        try container.encode(spellblockperlevel, forKey: .spellblockperlevel)
        try container.encode(attackrange, forKey: .attackrange)
        try container.encode(hpregen, forKey: .hpregen)
        try container.encode(hpregenperlevel, forKey: .hpregenperlevel)
        try container.encode(mpregen, forKey: .mpregen)
        try container.encode(mpregenperlevel, forKey: .mpregenperlevel)
        try container.encode(crit, forKey: .crit)
        try container.encode(critperlevel, forKey: .critperlevel)
        try container.encode(attackdamage, forKey: .attackdamage)
        try container.encode(attackdamageperlevel, forKey: .attackdamageperlevel)
        try container.encode(attackspeedperlevel, forKey: .attackspeedperlevel)
        try container.encode(attackspeed, forKey: .attackspeed)
    }
}

